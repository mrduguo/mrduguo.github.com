<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with
  this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version
  2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for
  the specific language governing permissions and limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.duguo.xdir.tests</groupId>
        <artifactId>xdir-tests</artifactId>
        <version>0.9.0</version>
    </parent>
    <groupId>org.duguo.xdir.tests</groupId>
    <artifactId>xdir-tests-functional</artifactId>
    <version>0.9.0</version>
    <name>XDir Platform tests (Functional)</name>

    <properties>
        <skipTests>false</skipTests>
    </properties>

    <!-- ======================================= -->
    <!-- DEPENDENCIES                            -->
    <!-- ======================================= -->
    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>2.15.0</version>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${lib.slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>${lib.slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${lib.slf4j.version}</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <!-- Sample commands:

    mvn clean install -Ddeploy-build

    mvn clean install -Ddeploy-build -DwaitForStop

    mvn clean install -Ddeploy-build -Pfirefox

    -->
    <profiles>
        <profile>
            <id>firefox</id>
            <properties>
                <test.web.driver.impl>org.openqa.selenium.firefox.FirefoxDriver</test.web.driver.impl>
            </properties>
        </profile>
        <profile>
            <id>run-local-server-and-execute-tests</id>
            <activation>
                <property>
                    <name>deploy-build</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>2.11</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>${basedir}/src/main/resources/testng/xdir-functional-test.xml</suiteXmlFile>
                            </suiteXmlFiles>
                            <systemPropertyVariables>
                                <test.web.driver.impl>${test.web.driver.impl}</test.web.driver.impl>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <version>1.3</version>
                        <executions>
                            <execution>
                                <id>start-xdir-server</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <source><![CDATA[

                                        command = "/bin/sh ${basedir}/../../dist/bin/target/xdir-dist-bin-${project.version}/bin/xdir.sh stop"
                                        command = command.execute()
                                        command.in.eachLine { line ->
                                            if(line.contains("FPBTC0001I"))
                                                Thread.sleep(500)
                                        }

                                        def serverStatus="STARTING"
                                        Thread.start {
                                            command = "/bin/sh ${basedir}/../../dist/bin/target/xdir-dist-bin-${project.version}/bin/xdir.sh start"
                                            if("true".equals(System.properties['waitForStop'])) {
                                                command=command+" -console"
                                            }
                                            command = command.execute()
                                            command.in.eachLine { line ->
                                                println line
                                                if(line.contains("FPBTE0005I"))
                                                    serverStatus="STARTED"
                                            }
                                        }

                                        long timeout=20000
                                        while(true){
                                            if(serverStatus.equals("STARTED")){
                                                break
                                            }else if(serverStatus.equals("FAILED")){
                                                fail("server start failed")
                                            }else if(timeout<0){ fail("server start timeout")
                                            }else{
                                                Thread.sleep(1000)
                                                timeout=timeout-1000
                                            }
                                        }

                                    ]]></source>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-xdir-server</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <source><![CDATA[
                                        if("true".equals(System.properties['waitForStop'])) {
                                            println "Press Enter to stop xdir server"; System.in.withReader { it.readLine() }
                                        }

                                        command = "/bin/sh ${basedir}/../../dist/bin/target/xdir-dist-bin-${project.version}/bin/xdir.sh stop"
                                        command = command.execute()
                                        command.in.eachLine { line ->
                                            println line
                                        }
                                    ]]></source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
